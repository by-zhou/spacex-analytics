{"version":3,"sources":["domain/usecases/getUpcomingNasaCrewMemberCountFactory.ts","domain/usecases/getKscRocketCountWithRecoveredFairingsFactory.ts","containers/useLoadData.ts","infrastructure/spacexConfig.ts","infrastructure/launchRepositoryImpl.ts","infrastructure/payloadRepositoryImpl.ts","infrastructure/launchpadRepositoryImpl.ts","infrastructure/crewMemberRepositoryImpl.ts","useUsecases.ts","domain/usecases/getSuccessfulLaunchCountFactory.ts","domain/usecases/getTotalDragon2FlightTimeFactory.ts","containers/messages.ts","containers/SuccessfulLaunchCount.tsx","containers/TotalDragon2FlightTime.tsx","containers/KscRocketCountWithRecoveredFairings.tsx","containers/UpcomingNasaCrewMemberCount.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getUpcomingLaunches","getCrewMember","getPastLaunches","getLaunchpad","useLoadData","fetchFn","useState","loading","setLoading","undefined","data","setData","error","setError","useEffect","then","result","catch","err","finally","SPACEX_BASE_URL","mapLaunch","launchDto","id","flightNumber","flight_number","name","date","Date","date_utc","datePrecision","date_precision","tbd","net","rocket","success","upcoming","fairings","reused","recovered","crew","capsules","payloads","launchpad","a","fetch","response","json","launchDtos","map","mapPayload","payloadDto","type","launch","nationalities","dragon","capsule","flightTimeSec","flight_time_sec","waterLanding","water_landing","landLanding","land_landing","getPayload","mapLaunchpad","launchpadDto","fullName","full_name","mapCrewMember","crewMemberDto","agency","usecases","getKscRocketCountWithRecoveredFairings","pastLaunches","Promise","all","launchpads","reduce","launchCount","index","getSuccessfulLaunchCount","successCount","filter","length","totalCount","createGetSuccessfulLaunchCount","getTotalDragon2FlightTime","pastLaunch","flat","payload","totalTime","createGetTotalDragon2FlightTime","getUpcomingNasaCrewMemberCount","upcomingLaunches","crewMembers","crewMember","useUsecases","LOADING_MESSAGE","ERROR_MESSAGE","SuccessfulLaunchCount","TotalDragon2FlightTime","KscRocketCountWithRecoveredFairings","UpcomingNasaCrewMemberCount","App","className","style","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c804f355.chunk.js","sourcesContent":["import { GetUpcomingLaunches } from '../entities/launchRepository';\nimport { GetCrewMember } from '../entities/crewMemberRepository';\n\nexport type GetUpcomingNasaCrewMemberCount = () => Promise<number>;\n\nexport const createGetUpcomingNasaCrewMemberCount = (getUpcomingLaunches: GetUpcomingLaunches, getCrewMember: GetCrewMember): GetUpcomingNasaCrewMemberCount =>\n  async () => {\n    const upcomingLaunches = await getUpcomingLaunches();\n    const crewMembers = await Promise.all(upcomingLaunches.map(pastLaunch => pastLaunch.crew).flat().map(getCrewMember));\n    return crewMembers.filter(crewMember => crewMember.agency === 'NASA').length;\n  };\n","import { GetPastLaunches } from '../entities/launchRepository';\nimport { GetLaunchpad } from '../entities/launchpadRepository';\n\nexport type GetKscRocketCountWithRecoveredFairings = () => Promise<number>;\n\nexport const createGetKscRocketCountWithRecoveredFairings =\n  (getPastLaunches: GetPastLaunches, getLaunchpad: GetLaunchpad): GetKscRocketCountWithRecoveredFairings =>\n    async () => {\n      const pastLaunches = await getPastLaunches();\n      const launchpads = await Promise.all(pastLaunches.map(launch => launch.launchpad ? getLaunchpad(launch.launchpad) : null));\n      return launchpads.reduce((launchCount, launchpad, index) => {\n        if (\n          launchpad?.fullName === 'Kennedy Space Center Historic Launch Complex 39A' &&\n          pastLaunches[index].fairings?.recovered\n        ) {\n          return launchCount + 1;\n        }\n        return launchCount;\n      }, 0);\n    };\n","import { useEffect, useState } from 'react';\n\nexport const useLoadData = <R, E extends Error = Error> (fetchFn: () => Promise<R>) => {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState<R | undefined>(undefined);\n  const [error, setError] = useState<E | undefined>(undefined);\n\n  useEffect(() => {\n    fetchFn()\n      .then(result => setData(result))\n      .catch((err: E) => setError(err))\n      .finally(() => setLoading(false));\n  }, [fetchFn]);\n\n  return { loading, data, error };\n};\n","export const SPACEX_BASE_URL = 'https://api.spacexdata.com/v4';\n","import { SPACEX_BASE_URL } from './spacexConfig';\nimport { Launch } from '../domain/entities/launch';\nimport { GetPastLaunches, GetUpcomingLaunches } from '../domain/entities/launchRepository';\n\nexport interface LaunchDto {\n  id: string;\n  flight_number: number;\n  name: string;\n  date_utc: string;\n  date_precision: 'half' | 'quarter' | 'year' | 'month' | 'day' | 'hour';\n  tbd: boolean;\n  net: boolean;\n  rocket: string | null;\n  success: boolean | null;\n  upcoming: boolean;\n  fairings: {\n    reused: boolean | null;\n    recovered: boolean | null;\n  } | null;\n  crew: string[];\n  capsules: string[];\n  payloads: string[];\n  launchpad: string | null;\n\n  // Rest of the fields are ignored\n}\n\nconst mapLaunch = (launchDto: LaunchDto): Launch => ({\n  id: launchDto.id,\n  flightNumber: launchDto.flight_number,\n    name: launchDto.name,\n  date: new Date(launchDto.date_utc),\n  datePrecision: launchDto.date_precision,\n  tbd: launchDto.tbd,\n  net: launchDto.net,\n  rocket: launchDto.rocket,\n  success: launchDto.success,\n  upcoming: launchDto.upcoming,\n  fairings: launchDto.fairings ? {\n    reused: launchDto.fairings.reused,\n    recovered: launchDto.fairings.recovered,\n  } : null,\n  crew: launchDto.crew,\n    capsules: launchDto.capsules,\n  payloads: launchDto.payloads,\n  launchpad: launchDto.launchpad,\n});\n\nexport const getPastLaunches: GetPastLaunches = async () => {\n  return fetch(`${SPACEX_BASE_URL}/launches/past`)\n    .then(response => {\n      return response.json() as Promise<LaunchDto[]>;\n    })\n    .then(launchDtos => launchDtos.map(mapLaunch));\n};\n\nexport const getUpcomingLaunches: GetUpcomingLaunches = async () => {\n  return fetch(`${SPACEX_BASE_URL}/launches/upcoming`)\n    .then(response => {\n      return response.json() as Promise<LaunchDto[]>;\n    })\n    .then(launchDtos => launchDtos.map(mapLaunch));\n};\n","import { SPACEX_BASE_URL } from './spacexConfig';\nimport { Payload } from '../domain/entities/payload';\nimport { GetPayload } from '../domain/entities/payloadRepository';\n\nexport interface PayloadDto {\n  id: string;\n  name: string;\n  type: string | null;\n  reused: boolean;\n  launch: string | null;\n  nationalities: string[];\n  dragon: {\n    capsule: string | null;\n    flight_time_sec: number | null;\n    water_landing: boolean | null;\n    land_landing: boolean | null;\n  };\n}\n\nconst mapPayload = (payloadDto: PayloadDto): Payload => ({\n  id: payloadDto.id,\n  name: payloadDto.name,\n  type: payloadDto.type,\n  reused: payloadDto.reused,\n  launch: payloadDto.launch,\n  nationalities: payloadDto.nationalities,\n  dragon: {\n    capsule: payloadDto.dragon.capsule,\n    flightTimeSec: payloadDto.dragon.flight_time_sec,\n    waterLanding: payloadDto.dragon.water_landing,\n    landLanding: payloadDto.dragon.land_landing,\n  },\n});\n\nexport const getPayload: GetPayload = async (id: string) => {\n  return fetch(`${SPACEX_BASE_URL}/payloads/${id}`)\n    .then(response => {\n      return response.json() as Promise<PayloadDto>;\n    })\n    .then(mapPayload);\n};\n","import { SPACEX_BASE_URL } from './spacexConfig';\nimport { Launchpad } from '../domain/entities/launchpad';\nimport { GetLaunchpad } from '../domain/entities/launchpadRepository';\n\nexport interface LaunchpadDto {\n  id: string;\n  name: string | null;\n  full_name: string | null;\n}\n\nconst mapLaunchpad = (launchpadDto: LaunchpadDto): Launchpad => ({\n  id: launchpadDto.id,\n  name: launchpadDto.name,\n  fullName: launchpadDto.full_name,\n});\n\nexport const getLaunchpad: GetLaunchpad = async (id: string) => {\n  return fetch(`${SPACEX_BASE_URL}/launchpads/${id}`)\n    .then(response => {\n      return response.json() as Promise<LaunchpadDto>;\n    })\n    .then(mapLaunchpad);\n}\n","import { SPACEX_BASE_URL } from './spacexConfig';\nimport { CrewMember } from '../domain/entities/crewMember';\nimport { GetCrewMember } from '../domain/entities/crewMemberRepository';\n\nexport interface CrewMemberDto {\n  id: string;\n  agency: string | null;\n}\n\nconst mapCrewMember = (crewMemberDto: CrewMemberDto): CrewMember => ({\n  id: crewMemberDto.id,\n  agency: crewMemberDto.agency,\n});\n\nexport const getCrewMember: GetCrewMember = async (id: string) => {\n  return fetch(`${SPACEX_BASE_URL}/crew/${id}`)\n    .then(response => {\n      return response.json() as Promise<CrewMemberDto>;\n    })\n    .then(mapCrewMember);\n}\n","import { getPastLaunches, getUpcomingLaunches } from './infrastructure/launchRepositoryImpl';\nimport { getPayload } from './infrastructure/payloadRepositoryImpl';\nimport { createGetSuccessfulLaunchCount } from './domain/usecases/getSuccessfulLaunchCountFactory';\nimport { createGetTotalDragon2FlightTime } from './domain/usecases/getTotalDragon2FlightTimeFactory';\nimport { createGetKscRocketCountWithRecoveredFairings } from './domain/usecases/getKscRocketCountWithRecoveredFairingsFactory';\nimport { getLaunchpad } from './infrastructure/launchpadRepositoryImpl';\nimport { createGetUpcomingNasaCrewMemberCount } from './domain/usecases/getUpcomingNasaCrewMemberCountFactory';\nimport { getCrewMember } from './infrastructure/crewMemberRepositoryImpl';\n\nconst usecases = {\n  getKscRocketCountWithRecoveredFairings: createGetKscRocketCountWithRecoveredFairings(getPastLaunches, getLaunchpad),\n  getSuccessfulLaunchCount: createGetSuccessfulLaunchCount(getPastLaunches),\n  getTotalDragon2FlightTime: createGetTotalDragon2FlightTime(getPastLaunches, getPayload),\n  getUpcomingNasaCrewMemberCount: createGetUpcomingNasaCrewMemberCount(getUpcomingLaunches, getCrewMember),\n};\n\nexport const useUsecases = () => usecases;\n","import { GetPastLaunches } from '../entities/launchRepository';\n\nexport interface SuccessfulCount {\n  successCount: number;\n  totalCount: number;\n}\n\nexport type GetSuccessfulLaunchCount = () => Promise<SuccessfulCount>;\n\nexport const createGetSuccessfulLaunchCount = (getPastLaunches: GetPastLaunches): GetSuccessfulLaunchCount =>\n  async () => {\n    const pastLaunches = await getPastLaunches();\n    return  {\n      successCount: pastLaunches.filter(launch => launch.success === true).length,\n      totalCount: pastLaunches.length,\n    };\n  };\n","import { GetPastLaunches } from '../entities/launchRepository';\nimport { GetPayload } from '../entities/payloadRepository';\n\nexport type GetTotalDragonFlightTime = () => Promise<number>;\n\nexport const createGetTotalDragon2FlightTime = (getPastLaunches: GetPastLaunches, getPayload: GetPayload): GetTotalDragonFlightTime =>\n  async () => {\n    const pastLaunches = await getPastLaunches();\n    const payloads = await Promise.all(pastLaunches.map(pastLaunch => pastLaunch.payloads).flat().map(getPayload));\n    return payloads\n      .filter(payload => payload.type === 'Dragon 2.0')\n      .reduce((totalTime, payload) => totalTime + (payload.dragon.flightTimeSec ?? 0), 0);\n  };\n","export const LOADING_MESSAGE = 'Loading…';\nexport const ERROR_MESSAGE = 'Error occurred when obtaining data!';\n","import React from 'react';\n\nimport { useLoadData } from './useLoadData';\nimport { useUsecases } from '../useUsecases';\nimport { ERROR_MESSAGE, LOADING_MESSAGE } from './messages';\n\nexport const SuccessfulLaunchCount = () => {\n  const { getSuccessfulLaunchCount } = useUsecases();\n  const { loading, data, error } = useLoadData(getSuccessfulLaunchCount);\n\n  if (loading) {\n    return <>{LOADING_MESSAGE}</>;\n  }\n\n  if (error) {\n    return <>{ERROR_MESSAGE}</>;\n  }\n\n  return <>Number of successful launches: {data?.successCount} of {data?.totalCount}</>;\n};\n","import React from 'react';\n\nimport { useLoadData } from './useLoadData';\nimport { useUsecases } from '../useUsecases';\nimport { ERROR_MESSAGE, LOADING_MESSAGE } from './messages';\n\nexport const TotalDragon2FlightTime = () => {\n  const { getTotalDragon2FlightTime } = useUsecases();\n  const { loading, data, error } = useLoadData(getTotalDragon2FlightTime);\n\n  if (loading) {\n    return <>{LOADING_MESSAGE}</>;\n  }\n\n  if (error) {\n    return <>{ERROR_MESSAGE}</>;\n  }\n\n  return <>Total flight time for all launched Dragon 2.0: {data} sec</>;\n};\n","import { useUsecases } from '../useUsecases';\nimport { useLoadData } from './useLoadData';\nimport { ERROR_MESSAGE, LOADING_MESSAGE } from './messages';\nimport React from 'react';\n\nexport const KscRocketCountWithRecoveredFairings = () => {\n  const { getKscRocketCountWithRecoveredFairings } = useUsecases();\n  const { loading, data, error } = useLoadData(getKscRocketCountWithRecoveredFairings);\n\n  if (loading) {\n    return <>{LOADING_MESSAGE}</>;\n  }\n\n  if (error) {\n    return <>{ERROR_MESSAGE}</>;\n  }\n\n  return <>Number of rockets launched from Kennedy Space Center Historic Launch Complex 39A with recovered fairings: {data}</>;\n};\n","import React from 'react';\n\nimport { useLoadData } from './useLoadData';\nimport { useUsecases } from '../useUsecases';\nimport { ERROR_MESSAGE, LOADING_MESSAGE } from './messages';\n\nexport const UpcomingNasaCrewMemberCount = () => {\n  const { getUpcomingNasaCrewMemberCount } = useUsecases();\n  const { loading, data, error } = useLoadData(getUpcomingNasaCrewMemberCount);\n\n  if (loading) {\n    return <>{LOADING_MESSAGE}</>;\n  }\n\n  if (error) {\n    return <>{ERROR_MESSAGE}</>;\n  }\n\n  return <>Number of NASA crew member to be in the upcoming launches: {data}</>;\n};\n","import React from 'react';\n\nimport { SuccessfulLaunchCount } from './containers/SuccessfulLaunchCount';\nimport { TotalDragon2FlightTime } from './containers/TotalDragon2FlightTime';\nimport { KscRocketCountWithRecoveredFairings } from './containers/KscRocketCountWithRecoveredFairings';\nimport { UpcomingNasaCrewMemberCount } from './containers/UpcomingNasaCrewMemberCount';\n\nfunction App() {\n\n  return (\n    <div className=\"App\" style={{ textAlign: 'center' }}>\n      <h1>🚀 SpaceX Analytics</h1>\n      <h4>Insights about SpaceX flights</h4>\n\n      <p><SuccessfulLaunchCount /></p>\n      <p><TotalDragon2FlightTime /></p>\n      <p><KscRocketCountWithRecoveredFairings /></p>\n      <p><UpcomingNasaCrewMemberCount /></p>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}